From: "Saved by Windows Internet Explorer 10"
Subject: mobile-services-client-android.md
Date: Wed, 17 Apr 2013 13:57:19 -0700
MIME-Version: 1.0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: file://C:\Users\ricksal.000\azure-content\DevCenter\Mobile\HowTo\mobile-services-client-android-MarkdownPadPreview.html
X-MimeOLE: Produced By Microsoft MimeOLE V6.2.9200.16384

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" =
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><HTML=20
lang=3D"en" lang=3D"en" xml:lang=3D"en"=20
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><META =
content=3D"IE=3D10.000"=20
http-equiv=3D"X-UA-Compatible">
 <TITLE>mobile-services-client-android.md</TITLE>=20
<META http-equiv=3D"Content-Type" content=3D"text/html; =
charset=3Dutf-8">=20
<STYLE type=3D"text/css">=0A=
body{=0A=
    margin: 0 auto;=0A=
    font-family: Georgia, Palatino, serif;=0A=
    color: #444444;=0A=
    line-height: 1;=0A=
    max-width: 960px;=0A=
    padding: 5px;=0A=
}=0A=
h1, h2, h3, h4 {=0A=
    color: #111111;=0A=
    font-weight: 400;=0A=
}=0A=
h1, h2, h3, h4, h5, p {=0A=
    margin-bottom: 16px;=0A=
    padding: 0;=0A=
}=0A=
h1 {=0A=
    font-size: 28px;=0A=
}=0A=
h2 {=0A=
    font-size: 22px;=0A=
    margin: 20px 0 6px;=0A=
}=0A=
h3 {=0A=
    font-size: 21px;=0A=
}=0A=
h4 {=0A=
    font-size: 18px;=0A=
}=0A=
h5 {=0A=
    font-size: 16px;=0A=
}=0A=
a {=0A=
    color: #0099ff;=0A=
    margin: 0;=0A=
    padding: 0;=0A=
    vertical-align: baseline;=0A=
}=0A=
a:hover {=0A=
    text-decoration: none;=0A=
    color: #ff6600;=0A=
}=0A=
a:visited {=0A=
    color: purple;=0A=
}=0A=
ul, ol {=0A=
    padding: 0;=0A=
    margin: 0;=0A=
}=0A=
li {=0A=
    line-height: 24px;=0A=
    margin-left: 44px;=0A=
}=0A=
li ul, li ul {=0A=
    margin-left: 24px;=0A=
}=0A=
p, ul, ol {=0A=
    font-size: 14px;=0A=
    line-height: 20px;=0A=
    max-width: 540px;=0A=
}=0A=
pre {=0A=
    padding: 0px 24px;=0A=
    max-width: 800px;=0A=
    white-space: pre-wrap;=0A=
}=0A=
code {=0A=
    font-family: Consolas, Monaco, Andale Mono, monospace;=0A=
    line-height: 1.5;=0A=
    font-size: 13px;=0A=
}=0A=
aside {=0A=
    display: block;=0A=
    float: right;=0A=
    width: 390px;=0A=
}=0A=
blockquote {=0A=
    border-left:.5em solid #eee;=0A=
    padding: 0 2em;=0A=
    margin-left:0;=0A=
    max-width: 476px;=0A=
}=0A=
blockquote  cite {=0A=
    font-size:14px;=0A=
    line-height:20px;=0A=
    color:#bfbfbf;=0A=
}=0A=
blockquote cite:before {=0A=
    content: '\2014 \00A0';=0A=
}=0A=
=0A=
blockquote p {  =0A=
    color: #666;=0A=
    max-width: 460px;=0A=
}=0A=
hr {=0A=
    width: 540px;=0A=
    text-align: left;=0A=
    margin: 0 auto 0 0;=0A=
    color: #999;=0A=
}=0A=
=0A=
button,=0A=
input,=0A=
select,=0A=
textarea {=0A=
  font-size: 100%;=0A=
  margin: 0;=0A=
  vertical-align: baseline;=0A=
  *vertical-align: middle;=0A=
}=0A=
button, input {=0A=
  line-height: normal;=0A=
  *overflow: visible;=0A=
}=0A=
button::-moz-focus-inner, input::-moz-focus-inner {=0A=
  border: 0;=0A=
  padding: 0;=0A=
}=0A=
button,=0A=
input[type=3D"button"],=0A=
input[type=3D"reset"],=0A=
input[type=3D"submit"] {=0A=
  cursor: pointer;=0A=
  -webkit-appearance: button;=0A=
}=0A=
input[type=3Dcheckbox], input[type=3Dradio] {=0A=
  cursor: pointer;=0A=
}=0A=
/* override default chrome & firefox settings */=0A=
input:not([type=3D"image"]), textarea {=0A=
  -webkit-box-sizing: content-box;=0A=
  -moz-box-sizing: content-box;=0A=
  box-sizing: content-box;=0A=
}=0A=
=0A=
input[type=3D"search"] {=0A=
  -webkit-appearance: textfield;=0A=
  -webkit-box-sizing: content-box;=0A=
  -moz-box-sizing: content-box;=0A=
  box-sizing: content-box;=0A=
}=0A=
input[type=3D"search"]::-webkit-search-decoration {=0A=
  -webkit-appearance: none;=0A=
}=0A=
label,=0A=
input,=0A=
select,=0A=
textarea {=0A=
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;=0A=
  font-size: 13px;=0A=
  font-weight: normal;=0A=
  line-height: normal;=0A=
  margin-bottom: 18px;=0A=
}=0A=
input[type=3Dcheckbox], input[type=3Dradio] {=0A=
  cursor: pointer;=0A=
  margin-bottom: 0;=0A=
}=0A=
input[type=3Dtext],=0A=
input[type=3Dpassword],=0A=
textarea,=0A=
select {=0A=
  display: inline-block;=0A=
  width: 210px;=0A=
  padding: 4px;=0A=
  font-size: 13px;=0A=
  font-weight: normal;=0A=
  line-height: 18px;=0A=
  height: 18px;=0A=
  color: #808080;=0A=
  border: 1px solid #ccc;=0A=
  -webkit-border-radius: 3px;=0A=
  -moz-border-radius: 3px;=0A=
  border-radius: 3px;=0A=
}=0A=
select, input[type=3Dfile] {=0A=
  height: 27px;=0A=
  line-height: 27px;=0A=
}=0A=
textarea {=0A=
  height: auto;=0A=
}=0A=
=0A=
/* grey out placeholders */=0A=
:-moz-placeholder {=0A=
  color: #bfbfbf;=0A=
}=0A=
::-webkit-input-placeholder {=0A=
  color: #bfbfbf;=0A=
}=0A=
=0A=
input[type=3Dtext],=0A=
input[type=3Dpassword],=0A=
select,=0A=
textarea {=0A=
  -webkit-transition: border linear 0.2s, box-shadow linear 0.2s;=0A=
  -moz-transition: border linear 0.2s, box-shadow linear 0.2s;=0A=
  transition: border linear 0.2s, box-shadow linear 0.2s;=0A=
  -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);=0A=
  -moz-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);=0A=
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);=0A=
}=0A=
input[type=3Dtext]:focus, input[type=3Dpassword]:focus, textarea:focus {=0A=
  outline: none;=0A=
  border-color: rgba(82, 168, 236, 0.8);=0A=
  -webkit-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px =
rgba(82, 168, 236, 0.6);=0A=
  -moz-box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px rgba(82, =
168, 236, 0.6);=0A=
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 8px rgba(82, 168, =
236, 0.6);=0A=
}=0A=
=0A=
/* buttons */=0A=
button {=0A=
  display: inline-block;=0A=
  padding: 4px 14px;=0A=
  font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;=0A=
  font-size: 13px;=0A=
  line-height: 18px;=0A=
  -webkit-border-radius: 4px;=0A=
  -moz-border-radius: 4px;=0A=
  border-radius: 4px;=0A=
  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px =
rgba(0, 0, 0, 0.05);=0A=
  -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px =
rgba(0, 0, 0, 0.05);=0A=
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, =
0, 0, 0.05);=0A=
  background-color: #0064cd;=0A=
  background-repeat: repeat-x;=0A=
  background-image: -khtml-gradient(linear, left top, left bottom, =
from(#049cdb), to(#0064cd));=0A=
  background-image: -moz-linear-gradient(top, #049cdb, #0064cd);=0A=
  background-image: -ms-linear-gradient(top, #049cdb, #0064cd);=0A=
  background-image: -webkit-gradient(linear, left top, left bottom, =
color-stop(0%, #049cdb), color-stop(100%, #0064cd));=0A=
  background-image: -webkit-linear-gradient(top, #049cdb, #0064cd);=0A=
  background-image: -o-linear-gradient(top, #049cdb, #0064cd);=0A=
  background-image: linear-gradient(top, #049cdb, #0064cd);=0A=
  color: #fff;=0A=
  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25);=0A=
  border: 1px solid #004b9a;=0A=
  border-bottom-color: #003f81;=0A=
  -webkit-transition: 0.1s linear all;=0A=
  -moz-transition: 0.1s linear all;=0A=
  transition: 0.1s linear all;=0A=
  border-color: #0064cd #0064cd #003f81;=0A=
  border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, =
0.25);=0A=
}=0A=
button:hover {=0A=
  color: #fff;=0A=
  background-position: 0 -15px;=0A=
  text-decoration: none;=0A=
}=0A=
button:active {=0A=
  -webkit-box-shadow: inset 0 3px 7px rgba(0, 0, 0, 0.15), 0 1px 2px =
rgba(0, 0, 0, 0.05);=0A=
  -moz-box-shadow: inset 0 3px 7px rgba(0, 0, 0, 0.15), 0 1px 2px =
rgba(0, 0, 0, 0.05);=0A=
  box-shadow: inset 0 3px 7px rgba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, =
0, 0.05);=0A=
}=0A=
button::-moz-focus-inner {=0A=
  padding: 0;=0A=
  border: 0;=0A=
}=0A=
=0A=
/* CSS stylesheet is based on Kevin Burke's Markdown.css project =
(http://kevinburke.bitbucket.org/markdowncss) */=0A=
</STYLE>
=20
<META name=3D"GENERATOR" content=3D"MSHTML 10.00.9200.16540"></HEAD>=20
<BODY>
<P><properties umbraconavihide=3D"0" disquscomments=3D"1" =
metacanonical=3D""=20
metadescription=3D"Learn how to use the Android client library for =
Windows Azure Mobile Services."=20
metakeywords=3D"Windows Azure Mobile Services, Mobile Service Android =
client library, Android client library"=20
pagetitle=3D"How to use the Android client library - Windows Azure =
Mobile Services feature guide"=20
urldisplayname=3D"Android Client Library" =
linkid=3D"mobile-services-how-to-Anroid-client"></properties></P>
<P>
<DIV chunk=3D"../chunks/article-left-menu-Android.md">
<P></P>
<H1>How to use the Android client library for Mobile Services</H1>
<DIV class=3D"dev-center-tutorial-selector"><A title=3D".NET Framework" =
href=3D"file:///C:/en-us/develop/mobile/how-to-guides/how-to-dotnet-clien=
t">.NET=20
Framework</A>     <A title=3D"JavaScript" =
href=3D"file:///C:/en-us/develop/mobile/how-to-guides/how-to-js-client">J=
avaScript</A>=20
    <A title=3D"IOS" =
href=3D"file:///C:/en-us/develop/mobile/how-to-guides/how-to-ios-client">=
IOS</A>=20
    <A title=3D"Android" =
href=3D"file:///C:/en-us/develop/mobile/how-to-guides/how-to-android-clie=
nt">Android</A>=20
</DIV>
<P>This guide shows you how to perform common scenarios using the =
Android client=20
for Windows Azure Mobile Services.  The scenarios covered include =
querying for=20
data; inserting, updating, and deleting data, authenticating users, =
handling=20
errors, and uploading BLOB data. If you are new to Mobile Services, you =
should=20
consider first completing the <A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/tutor=
ials/mobile-services-get-started-XXXXX.md">Mobile=20
Services quickstart</A>. The quickstart tutorial helps you configure =
your=20
account and create your first mobile service.</P>
<P>The samples are written in Java and require the <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D257545">Mobile=20
Services SDK</A>. This tutorial also requires the <A =
href=3D"https://go.microsoft.com/fwLink/?LinkID=3D280125&amp;clcid=3D0x40=
9">Android=20
SDK</A>, which includes the Eclipse integrated development environment =
(IDE) and=20
Android Developer Tools (ADT) plugin. The Mobile Services SDK supports =
Android=20
version 2.2 or later, but we recommend building against Android version =
4.2 or=20
later.</P>
<H2>Table of Contents</H2>
<UL>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#what-is">What=20
  is Mobile Services</A></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#concepts">Concept=
s</A></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#create-client">Ho=
w=20
  to: Create the Mobile Services client</A></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#instantiating">Ho=
w=20
  to: Create a table reference</A>=20
  <UL>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#api">The=20
    API structure</A></LI></UL></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#querying">How=20
  to: Query data from a mobile service</A>=20
  <UL>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#filtering">Filter=
=20
    returned data</A></LI>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#sorting">Sort=20
    returned data</A></LI>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#paging">Return=20
    data in pages</A></LI>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#selecting">Select=
=20
    specific columns</A></LI>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#chaining">How=20
    to: Concatenate query methods</A></LI></UL></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#inserting">How=20
  to: Insert data into a mobile service</A></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#updating">How=20
  to: Update data in a mobile service</A></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#deleting">How=20
  to: Delete data in a mobile service</A></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#lookup">How=20
  to: Look up a specific item</A></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#untyped">How=20
  to: Work with untyped data</A>=20
  <UL>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#model">The=20
    programming model: typed and untyped</A></LI></UL></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#binding">How=20
  to: Bind data to the user interface</A>=20
  <UL>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#layout">How=20
    to: Define the layout</A></LI>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#adapter">How=20
    to: Define the adapter</A></LI>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#use-adapter">How =

    to: Use the adapter</A></LI></UL></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#authentication">H=
ow=20
  to: Authenticate users</A>=20
  <UL>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#caching">Cache=20
    authentication tokens</A></LI></UL></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#errors">How=20
  to: Handle errors</A></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#tests">How=20
  to: Design unit tests</A></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#customizing">How =

  to: Customize the client</A>=20
  <UL>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#headers">Customiz=
e=20
    request headers</A></LI>
    <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#serialization">Cu=
stomize=20
    serialization</A></LI></UL></LI>
  <LI><A =
href=3D"file:///C:/Users/ricksal.000/azure-content/DevCenter/Mobile/HowTo=
/mobile-services-client-android-MarkdownPadPreview.html#next-steps">Next =

  steps</A></LI></UL>
<P>
<DIV chunk=3D"../chunks/mobile-services-concepts.md">
<P></P>
<H2><A name=3D"setup"></A><SPAN class=3D"short-header">Setup</SPAN>Setup =
and=20
Prerequisites</H2>
<P>We assume that you have created a mobile service and a table. For =
more=20
information see <A =
href=3D"http://msdn.microsoft.com/en-us/library/windowsazure/jj193162.asp=
x">Create=20
a table</A>. In the code used in this topic, we assume the table is =
named=20
<EM>ToDoItem</EM>, and that it has the following columns:</P>
<UL>
  <LI>id</LI>
  <LI>text</LI>
  <LI>complete</LI>
  <LI>duration</LI></UL>
<P>The corresponding typed client side object is the following:</P>
<PRE><CODE>public class ToDoItem {=0A=
    private Integer id;=0A=
    private String text;=0A=
    private Boolean complete;=0A=
    private Date due=0A=
    private Integer duration;=0A=
}=0A=
</CODE></PRE>
<P>When dynamic schema is enabled, Windows Azure Mobile Services =
automatically=20
generates new columns based on the object in the insert or update =
request. For=20
more information, see <A=20
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D296271">Dynamic =
schema</A>.</P>
<H2><A name=3D"create-service"></A><SPAN class=3D"short-header">Create =
the Mobile=20
Services Client</SPAN>How to: Create the Mobile Services Client</H2>
<P>The following code creates the mobile service client object that is =
used to=20
access your mobile service. </P>
<PRE><CODE>        mClient =3D new MobileServiceClient(=0A=
                "MobileServiceUrl", // Replace with the above Site URL=0A=
                "AppKey",           // replace with the Application Key =0A=
                this)=0A=
</CODE></PRE>
<P>In the code above, replace <CODE>MobileServiceUrl</CODE> and=20
<CODE>AppKey</CODE> with the mobile service URL and application key, in =
that=20
order. Both of these are available on the Windows Azure Management =
Portal, by=20
selecting your mobile service and then clicking on "Dashboard".</P>
<H2><A name=3D"instantiating"></A><SPAN class=3D"short-header">Creating =
a table=20
reference</SPAN>How to: Create a table reference</H2>
<P>The easiest way to query or modify data in the mobile service is by =
using the=20
<EM>typed programming model</EM>, since Java is a strongly typed =
language (later=20
on we will discuss the <EM>untyped</EM> model). This model provides =
seamless=20
serialization and deserialization to JSON using the <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290801"=20
target=3D"_blank">gson</A> library when sending data between the client =
and the=20
mobile service: the developer doesn't have to do anything, the framework =
handles=20
it all.</P>
<P>The first thing you do to query or modify data is to create a <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290689">MobileServiceTab=
le</A>=20
object by calling the <STRONG>getTable</STRONG> method on the=20
[<STRONG>MobileServiceClient</STRONG>] TBD link.  There are two =
overloads of=20
this method:</P>
<PRE><CODE>public class MobileServiceClient {=0A=
    public &lt;E&gt; MobileServiceTable&lt;E&gt; getTable(Class&lt;E&gt; =
clazz);=0A=
    public &lt;E&gt; MobileServiceTable&lt;E&gt; getTable(String name, =
Class&lt;E&gt; clazz);=0A=
}=0A=
</CODE></PRE>
<P>In the following code, <EM>mClient</EM> is a reference to your mobile =
service=20
client.</P>
<P>The first overload is used where the class name and the table name =
are the=20
same:</P>
<PRE><CODE>    private MobileServiceTable&lt;ToDoItem&gt; mToDoTable =3D =
mClient.getTable(ToDoItem.class);=0A=
</CODE></PRE>
<P>The 2nd overload is used when the table name is different from the =
type=20
name.</P>
<PRE><CODE>    private MobileServiceTable&lt;ToDoItem&gt; mToDoTable =3D =
mClient.getTable("ToDoItemBackup", ToDoItem.class);=0A=
</CODE></PRE>
<H3><A name=3D"api"></A>The API structure</H3>
<P>All the method calls invoked on a table object follow the callback =
pattern.=20
One of the parameters to the method is always a callback object. The =
callback=20
object always contains an <EM>onCompleted</EM> method. The =
<EM>onCompleted</EM>=20
method contains one parameter that is an <EM>Exception</EM> object, =
which you=20
can test to determine the success of the method call. A null =
<EM>Exception</EM>=20
object indicates success, otherwise the <EM>Exception</EM> object =
describes the=20
reason for failure.</P>
<P>There are several different callback objects, and which one you use =
depends=20
on whether you are querying, modifying, or deleting data. The parameters =
to the=20
<EM>onCompleted</EM> method vary, depending on which callback object it =
is part=20
of.</P>
<H2><A name=3D"querying"></A><SPAN class=3D"short-header">Querying =
data</SPAN>How=20
to: Query data from a mobile service</H2>
<P>This section describes how to issue queries to the mobile service.=20
Subsections describe diffent aspects such as sorting filtering, paging, =
and=20
inserts updates and deletes. Finally, we discuss how you can chain these =

operations together.</P>
<P>The following code returns all items in the <EM>ToDoItem</EM> table. =
</P>
<PRE><CODE>    mToDoTable.execute(new =
TableQueryCallback&lt;ToDoItem&gt;() {=0A=
            public void onCompleted(List&lt;ToDoItem&gt; result, int =
count, Exception exception, ServiceFilterResponse response) {=0A=
                if (exception =3D=3D null) {=0A=
                    for (ToDoItem item : result) {=0A=
                        Log.i(TAG, "Read object with ID " + item.id);  =0A=
                    }=0A=
                }=0A=
            }=0A=
        });=0A=
</CODE></PRE>
<P>For queries, the callback object is a=20
<EM>TableQueryCallback&lt;E&gt;</EM>.</P>
<P>The <EM>result</EM> parameter returns the result set from the query, =
and the=20
code inside the success branch of the <EM>exception</EM> test shows how =
to parse=20
the individual rows.</P>
<H3><A name=3D"filtering"></A>How to: Filter returned data</H3>
<P>The following code returns all items from the <EM>ToDoItem</EM> table =
whose=20
<EM>complete</EM> field is equal to <EM>false</EM>. <EM>mToDoTable</EM> =
is the=20
reference to the mobile service table that we created previously. </P>
<PRE><CODE>    =
mToDoTable.where().field("complete").eq(false).execute(new =
TableQueryCallback&lt;ToDoItem&gt;() {=0A=
        public void onCompleted(List&lt;ToDoItem&gt; result, int count, =
Exception exception, ServiceFilterResponse response) {=0A=
            if (exception =3D=3D null) {=0A=
                for (ToDoItem item : result) {=0A=
                    Log.i(TAG, "Read object with ID " + item.id);  =0A=
                }=0A=
            } =0A=
        }=0A=
    });=0A=
</CODE></PRE>
<P>You start a filter with a <STRONG><EM>where</EM></STRONG> method call =
on the=20
table reference. This is followed by a <STRONG><EM>field</EM></STRONG> =
method=20
call followed by a method call that specifies the logical predicate. =
Possible=20
predicate methods include <STRONG><EM>eq</EM></STRONG>,=20
<STRONG><EM>ne</EM></STRONG>, <STRONG><EM>gt</EM></STRONG>,=20
<STRONG><EM>ge</EM></STRONG>, <STRONG><EM>lt</EM></STRONG>,=20
<STRONG><EM>le</EM></STRONG> etc.</P>
<P>This is sufficient for comparing number and string fields to specific =
values.=20
But you can do a lot more.</P>
<P>For example, you can filter on dates. You can compare the entire date =
field,=20
but you can also compare parts of the date, with methods such as=20
<STRONG><EM>year</EM></STRONG>, <STRONG><EM>month</EM></STRONG>,=20
<STRONG><EM>day</EM></STRONG>, <STRONG><EM>hour</EM></STRONG>,=20
<STRONG><EM>minute</EM></STRONG> and <STRONG><EM>second</EM></STRONG>. =
The=20
following partial code adds a filter for items whose due date is this =
year.</P>
<PRE><CODE>    mToDoTable.where().year(field("due")).eq(2013)=0A=
</CODE></PRE>
<P>You can do a wide variety of complex filters on string fields with =
methods=20
like <STRONG><EM>startsWith</EM></STRONG>, =
<STRONG><EM>endsWith</EM></STRONG>,=20
<STRONG><EM>concat</EM></STRONG>, <STRONG><EM>subString</EM></STRONG>,=20
<STRONG><EM>indexOf</EM></STRONG>, <STRONG><EM>replace</EM></STRONG>,=20
<STRONG><EM>toLower</EM></STRONG>, <STRONG><EM>toUpper</EM></STRONG>,=20
<STRONG><EM>trim</EM></STRONG>, and <STRONG><EM>length</EM></STRONG>. =
The=20
following partial code filters for table rows where the <EM>text</EM> =
column=20
starts with "PRI0".</P>
<PRE><CODE>    mToDoTable.where().startsWith("text", "PRI0")=0A=
</CODE></PRE>
<P>Number fields also allow a wide variety of more complex filters with =
methods=20
like <STRONG><EM>add</EM></STRONG>, <STRONG><EM>sub</EM></STRONG>,=20
<STRONG><EM>mul</EM></STRONG>, <STRONG><EM>div</EM></STRONG>,=20
<STRONG><EM>mod</EM></STRONG>, <STRONG><EM>floor</EM></STRONG>,=20
<STRONG><EM>ceiling</EM></STRONG>, and <STRONG><EM>round</EM></STRONG>. =
The=20
following partial code filters for table rows where the =
<EM>duration</EM> is an=20
even number.</P>
<PRE><CODE>    mToDoTable.where().field("duration").mod(0).eq(0)=0A=
</CODE></PRE>
<P>You can combine predicates with methods like =
<STRONG><EM>and</EM></STRONG>,=20
<STRONG><EM>or</EM></STRONG> and <STRONG><EM>not</EM></STRONG>. This =
partial=20
code combines two of the above examples.</P>
<PRE><CODE>    =
mToDoTable.where().year(field("due")).eq(2013).and().startsWith("text", =
"PRI0")=0A=
</CODE></PRE>
<P>And you can group and nest logical operators, as shown in this =
partial=20
code:</P>
<PRE><CODE>    mToDoTable.where()=0A=
                .year(field("due")).eq(2013)=0A=
                    .and=0A=
                (.startsWith("text", =
"PRI0").or().field("duration").gt(10))=0A=
</CODE></PRE>
<P>For more detailed discussion and examples of filtering, see <A =
title=3D"The Mobile Services Android client query model"=20
href=3D"http://hashtagfail.com/post/46493261719/mobile-services-android-q=
uerying">http://hashtagfail.com/post/46493261719/mobile-services-android-=
querying</A>.</P>
<H3><A name=3D"sorting"></A>How to: Sort returned data</H3>
<P>The following code returns all items from a table of =
<EM>ToDoItems</EM>=20
sorted ascending by the <EM>text</EM> field. <EM>mToDoTable</EM> is the=20
reference to the mobile mervice table that you created previously.</P>
<PRE><CODE>    mToDoTable.orderBy("text", order.Ascending)=0A=
        .execute(new TableQueryCallback&lt;ToDoItem&gt;() { =0A=
            /* same implementation as above */ =0A=
        }); =0A=
</CODE></PRE>
<P>The first parameter of the <STRONG><EM>orderBy</EM></STRONG> function =
is a=20
string equal to the name of the field on which to sort.</P>
<P>The second parameter uses the <STRONG><EM>order</EM></STRONG> =
enumeration to=20
specify whether to sort ascending or descending.</P>
<P>Note that if you are filtering using the =
<STRONG><EM>where</EM></STRONG>=20
function, the <STRONG><EM>where</EM></STRONG> function must be invoked =
prior to=20
the <STRONG><EM>orderBy</EM></STRONG> function.</P>
<H3><A name=3D"paging"></A>How to: Return data in pages</H3>
<P>The first example shows how to select the top 5 items from a table. =
The query=20
returns the items from a table of  <EM>ToDoItems</EM>. =
<EM>mToDoTable</EM> is=20
the reference to the mobile service table that you created =
previously.</P>
<PRE><CODE>    mToDoTable.top(5)=0A=
            .execute(new TableQueryCallback&lt;ToDoItem&gt;() {   =0A=
            public void onCompleted(List&lt;ToDoItem&gt; result, =0A=
                                    int count,=0A=
                                    Exception exception, =0A=
                                    ServiceFilterResponse response) {=0A=
                if (exception =3D=3D null) {=0A=
                    for (ToDoItem item : result) {=0A=
                        Log.i(TAG, "Read object with ID " + item.id);  =0A=
                    }=0A=
                } =0A=
            }=0A=
        });=0A=
</CODE></PRE>
<P>Next, we define a query that skips the first 5 items, and then =
returns the=20
next 5.</P>
<PRE><CODE>    mToDoTable.skip(5).top(5)=0A=
            .execute(new TableQueryCallback&lt;ToDoItem&gt;() {   =0A=
            public void onCompleted(List&lt;ToDoItem&gt; result, =0A=
                                    int count,=0A=
                                    Exception exception, =0A=
                                    ServiceFilterResponse response) {=0A=
                if (exception =3D=3D null) {=0A=
                    for (ToDoItem item : result) {=0A=
                        Log.i(TAG, "Read object with ID " + item.id);  =0A=
                    }=0A=
                } =0A=
            }=0A=
        });=0A=
</CODE></PRE>
<H3><A name=3D"selecting"></A>How to: Select specific columns</H3>
<P>The following code illustrates how to return all items from a table =
of =20
<EM>ToDoItems</EM>, but only displays the <EM>complete</EM> and =
<EM>text</EM>=20
fields. <EM>mToDoTable</EM> is the reference to the mobile service table =
that we=20
created previously.</P>
<PRE><CODE>    mToDoTable.select("complete", "text")=0A=
            .execute(new TableQueryCallback&lt;ToDoItem&gt;() { =0A=
                /* same implementation as above */ =0A=
        }); =0A=
</CODE></PRE>
<P>Here the parameters to the select function are the string names of =
the=20
table's columns that you want to return.</P>
<P>The <A=20
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290689"><STRONG>select</=
STRONG></A>=20
method needs to follow methods like <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D296296"><STRONG>where</S=
TRONG></A>=20
and <A=20
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D296313"><STRONG>orderBy<=
/STRONG></A>,=20
if they are present. It can be followed by methods like <A =
href=3D"http://dl.windowsazure.com/androiddocs/com/microsoft/windowsazure=
/mobileservices/MobileServiceTable.html#top(int)"><STRONG>top</STRONG></A=
>.</P>
<H3><A name=3D"chaining"></A>How to: Concatenate query methods</H3>
<P>The methods used in querying mobile mervice tables can be =
concatenated. This=20
allows you to do things like select specific columns of filtered rows =
that are=20
sorted and paged. You can create quite complex logical filters.</P>
<P>What makes this work is that the query methods you use return=20
<EM>MobileServiceQuery&lt;T&gt;</EM> objects, which can in turn have =
additional=20
methods invoked on them. To end the series of methods and actually run =
the=20
query, you call the <EM>execute</EM> method.</P>
<P>Here's a code sample where mToDoTable is a reference to the mobile =
services=20
ToDoItem table.</P>
<PRE><CODE>    mToDoTable.where().year(field("due")).eq(2013)=0A=
                    .and(.startsWith("text", =
"PRI0").or().field("duration").gt(10))=0A=
                .select("id", "complete", "text", "duration")=0A=
                .orderBy(duration, order.Ascending).top(20)             =0A=
                .execute(new TableQueryCallback&lt;ToDoItem&gt;() { =0A=
                    /* code to execute */ =0A=
            });=0A=
</CODE></PRE>
<P>The main requirement in chaining methods together is that the =
<EM>where</EM>=20
method and predicates need to come first. After that, you can call =
subsequent=20
methods in the order that best meets the needs of your application.</P>
<H2><A name=3D"inserting"></A><SPAN class=3D"short-header">Inserting =
data</SPAN>How=20
to: Insert data into a mobile service</H2>
<P>The following code shows how to insert new rows into a table.</P>
<P>First you instantiate an instance of the ToDoItem class and set its=20
properties.</P>
<PRE><CODE>    ToDoItem mToDoItem =3D new ToDoItem();=0A=
    mToDoItem.text =3D "Test Program";=0A=
    mToDoItem.complete =3D false;=0A=
    mToDoItem.duration =3D 5.0; /* TBD duration float format */=0A=
</CODE></PRE>
<P>Next you call the <EM>insert</EM> method.</P>
<PRE><CODE>    mToDoTable.insert(mToDoItem, new =
TableOperationCallback&lt;ToDoItem&gt;() {=0A=
        public void onCompleted(ToDoItem entity, Exception exception, =
ServiceFilterResponse response) { =0A=
            if (exception =3D=3D null) {=0A=
                    Log.i(TAG, "Read object with ID " + entity.id);  =0A=
            } =0A=
        }=0A=
    });=0A=
</CODE></PRE>
<P>For the <EM>insert</EM> method, the callback object is a=20
<EM>TableOperationCallback&lt;ToDoItem&gt;</EM> object.</P>
<P>The entity parameter of the <EM>onCompleted</EM> method contains the =
newly=20
inserted object. The successful code shows how to access the <EM>id</EM> =
of the=20
inserted row.</P>
<H2><A name=3D"updating"></A><SPAN class=3D"short-header">Updating =
data</SPAN>How=20
to: Update data in a mobile service</H2>
<P>The following code shows how to update data in a table. In this =
example,=20
<EM>mToDoItem</EM> is a reference to an item in the <EM>ToDoItem</EM> =
table.</P>
<PRE><CODE>    mToDoTable.update(item, new =
TableOperationCallback&lt;ToDoItem&gt;() {=0A=
        public void onCompleted(ToDoItem entity, Exception exception, =
ServiceFilterResponse response) {=0A=
            if (exception =3D=3D null) {=0A=
                    Log.i(TAG, "Read object with ID " + entity.id);  =0A=
            } =0A=
        }=0A=
    });=0A=
</CODE></PRE>
<P>Note that the callback object and <EM>onCompleted</EM> method's =
parameters=20
are the same as when we do an insert.</P>
<H2><A name=3D"deleting"></A><SPAN class=3D"short-header">Deleting =
data</SPAN>How=20
to: Delete data in a mobile service</H2>
<P>The following code shows how to delete data from a table. It deletes =
an=20
existing item from the ToDoItem table, using a reference to the item, in =
this=20
case mToDoItem.</P>
<PRE><CODE>    mToDoTable.delete(mToDoItem, new TableDeleteCallback() {=0A=
        public void onCompleted(Exception exception, =0A=
                ServiceFilterResponse response) {=0A=
            if(exception =3D=3D null){=0A=
                Log.i(TAG, "Object deleted");=0A=
            }=0A=
        }=0A=
    });=0A=
</CODE></PRE>
<P>Note that in the <EM>delete</EM> case, the callback object is a=20
<EM>TableDeleteCallback</EM> and the <EM>onCompleted</EM> method is =
somewhat=20
different in that no table row is returned.</P>
<P>The following code illustrates another way to do this. It deletes an =
existing=20
item in the ToDoItem table by specifying the value of the id field of =
the row to=20
delete (assumed to equal "5"). </P>
<PRE><CODE>    mToDoTable.delete(5, new TableDeleteCallback() {=0A=
        public void onCompleted(Exception exception, =0A=
                ServiceFilterResponse response) {=0A=
            if(exception =3D=3D null){=0A=
                Log.i(TAG, "Object deleted");=0A=
            }=0A=
        }=0A=
    });=0A=
</CODE></PRE>
<H2><A name=3D"lookup"></A><SPAN class=3D"short-header">Looking up =
data</SPAN>How=20
to: Look up a specific item</H2>
<P>Sometimes you want to look up a specific item by its <EM>Id</EM>, =
unlike=20
querying where you typically get a collection of items that satisfy some =

criteria. The following code shows how to do this, for id =3D 23.</P>
<PRE><CODE>    mToDoTable.lookUp(23, new =
TableOperationCallback&lt;ToDoItem&gt;() {=0A=
        public void onCompleted(item entity, Exception exception,=0A=
                ServiceFilterResponse response) {=0A=
            if(exception =3D=3D null){=0A=
                Log.i(TAG, "Read object with ID " + entity.id);    =0A=
            }=0A=
        }=0A=
    });=0A=
</CODE></PRE>
<H2><A name=3D"untyped"></A><SPAN class=3D"short-header">Working with =
untyped=20
data</SPAN>How to: Work with untyped data</H2>
<P>The untyped programming model gives you exact control over the JSON=20
serialization, and there are some scenarios where you may wish to use =
it, for=20
example, if your mobile service table contains a large number of columns =
and you=20
only need to reference a few of them. Using the typed model requires you =
to=20
define all of the movile service table's columns in your data class. But =
with=20
the untyped model you only define the columns you need to use.</P>
<P>Similar to the typed model, you start by getting a table reference, =
but in=20
this case it's a <A=20
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290689">MobileServicesJs=
onTable</A>=20
object. You get the reference by calling the <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290689">getTable()</A>=20
method on an instance of the Mobile Services client.</P>
<P>You use the following overload of this method, which is used for =
working with=20
the untyped JSON-based programming models:</P>
<PRE><CODE>    public class MobileServiceClient {=0A=
        public MobileServiceJsonTable getTable(String name);=0A=
    }=0A=
</CODE></PRE>
<P>Most of the API calls for accessing data are similar to the typed =
programming=20
calls. The main difference is that in the untyped model you invoke =
methods on=20
the <EM>MobileServiceJsonTable</EM> object, instead of the=20
<EM>MobileServiceTable</EM> object. Usage of the callback object and the =

<EM>onCompleted</EM> method is very similar to the typed model.</P>
<H3><A name=3D"json_instance"></A>How to: Create an instance of an =
untyped=20
table</H3>
<P>Once you create an instance of the Mobile Services client (here, the=20
<EM>mClient</EM> variable), you next create an instance of a=20
<EM>MobileServiceJsonTable</EM>, with the following code.</P>
<PRE><CODE>    private MobileServiceJsonTable mTable =3D =
mClient.getTable("ToDoItem");=0A=
</CODE></PRE>
<P>Once you have created an instance of the =
<EM>MobileServiceJsonTable</EM>, you=20
can call almost all of the methods on it that you can with the typed =
programming=20
model. However in some cases the methods take an untyped parameter, as =
we see in=20
the following examples.</P>
<H3><A name=3D"json_insert"></A>How to: Insert into an untyped =
table</H3>
<P>The following code shows how to do an insert. The first step is to =
create a=20
<STRONG>JsonObject</STRONG>, which is part of the <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290801"=20
target=3D"_blank">gson</A> library.</P>
<PRE><CODE>    JsonObject task =3D new JsonObject();=0A=
    task.addProperty("text", "Wake up");=0A=
    task.addProperty("complete", false);=0A=
    task.addProperty("duration", 5);=0A=
</CODE></PRE>
<P>The next step is to insert the object. The callback function passed =
to the=20
<STRONG>insert</STRONG> method is an instance of the=20
<STRONG>TableJsonOperationCallback</STRONG> class. Note how the first =
parameter=20
of the <EM>onCompleted</EM> method is a JsonObject.</P>
<PRE><CODE>    mTable.insert(task, new TableJsonOperationCallback() {=0A=
        public void onCompleted(JsonObject jsonObject, Exception =
exception,=0A=
                ServiceFilterResponse response) {=0A=
            if(exception =3D=3D null){=0A=
                Log.i(TAG, "Object inserted with ID " + =0A=
            jsonObject.getAsJsonPrimitive("id").getAsInt());=0A=
            }=0A=
        }=0A=
    });=0A=
</CODE></PRE>
<P>Note how we get the ID of the inserted object with this method =
call:</P>
<PRE><CODE>            jsonObject.getAsJsonPrimitive("id").getAsInt());=0A=
</CODE></PRE>
<H3><A name=3D"json_delete"></A>How to: Delete from an untyped =
table</H3>
<P>The following code shows how to delete an instance, in this case, the =
same=20
instance of a <STRONG>JsonObject</STRONG> that was created in the prior=20
<EM>insert</EM> example. Note the callback method is=20
<STRONG>TableDeleteCallback()</STRONG> and the =
<STRONG>onCompleted</STRONG>=20
method has a different signature.</P>
<PRE><CODE>    mTable.delete(task, new TableDeleteCallback() {=0A=
        public void onCompleted(Exception exception, =
ServiceFilterResponse response) {=0A=
            if(exception =3D=3D null){=0A=
                Log.i(TAG, "Object deleted");=0A=
            }=0A=
        }=0A=
    });=0A=
</CODE></PRE>
<P>You can also delete an instance directly by using its ID: </P>
<PRE><CODE>    mTable.delete(task.getAsJsonPrimitive("id").getAsInt(), =
...)=0A=
</CODE></PRE>
<H3><A name=3D"json_get"></A>How to: Return all rows from an untyped =
table</H3>
<P>The following code shows how to retrieve an entire table. Note the =
different=20
callback object used with the <STRONG>execute</STRONG> method:=20
<STRONG>TableJsonQueryCallback</STRONG>.</P>
<PRE><CODE>    mTable.execute(new TableJsonQueryCallback() {=0A=
        public void onCompleted(JsonElement result, int count, Exception =
exception,=0A=
                ServiceFilterResponse response) {=0A=
            if(exception =3D=3D null){=0A=
                JsonArray results =3D result.getAsJsonArray();=0A=
                for(JsonElement item : results){=0A=
                    Log.i(TAG, "Read object with ID " + =0A=
                =
item.getAsJsonObject().getAsJsonPrimitive("id").getAsInt());=0A=
                }=0A=
            }=0A=
        }=0A=
    });=0A=
</CODE></PRE>
<P>You can do filtering, sorting and paging by concatenating the same =
methods=20
that were used in the typed programming model.</P>
<H2><A name=3D"binding"></A><SPAN class=3D"short-header">Binding =
data</SPAN>How to:=20
Bind data to the user interface</H2>
<P>Data binding involves three components:</P>
<UL>
  <LI>the data source</LI>
  <LI>the screen layout</LI>
  <LI>and the adapter that ties the two together.</LI></UL>
<P>In our sample code, we return the data from the mobile service table=20
<EM>ToDoItem</EM> into an array. This is one very common pattern for =
data=20
applications: database queries typically return a collection of rows =
which the=20
client gets in a list or array. In this sample the array is the data =
source.=20
</P>
<P>The code specifies a screen layout that defines the view of the data =
that=20
will appear on the device. </P>
<P>And the two are bound together with an adapter, which in this code is =
an=20
extension of the <EM>ArrayAdapter&lt;ToDoItem&gt;</EM> class.</P>
<H3><A name=3D"layout"></A>How to: Define the Layout</H3>
<P>The layout is defined by several snippets of XML code. The following =
code is=20
contained in the file that  describes the page overall, and this code =
specifies=20
the ListView that will display the data.</P>
<PRE><CODE>    &lt;ListView=0A=
        android:id=3D"@+id/listViewToDo"=0A=
        android:layout_width=3D"match_parent"=0A=
        android:layout_height=3D"wrap_content"=0A=
        tools:listitem=3D"@layout/row_list_to_do" =0A=
        android:padding=3D"6dip" &gt;=0A=
    &lt;/ListView&gt;=0A=
</CODE></PRE>
<P>In the above code the <EM>listitem</EM> attribute specifies the id of =
the=20
layout for an individual row in the list. Here is that code, which =
specifies a=20
check boxe and its associated text. This gets instantiated once for each =
item in=20
the list. A more complex layout would specify additional fields in the=20
display.</P>
<PRE><CODE>    &lt;?xml version=3D"1.0" encoding=3D"utf-8"?&gt;=0A=
    &lt;LinearLayout =
xmlns:android=3D"http://schemas.android.com/apk/res/android"=0A=
        android:layout_width=3D"match_parent"=0A=
        android:layout_height=3D"match_parent"=0A=
        android:orientation=3D"horizontal"&gt;           =0A=
        &lt;CheckBox=0A=
            android:id=3D"@+id/checkToDoItem"=0A=
            android:layout_width=3D"wrap_content"=0A=
            android:layout_height=3D"wrap_content"=0A=
            android:text=3D"@string/checkbox_text" /&gt;=0A=
    &lt;/LinearLayout&gt;=0A=
</CODE></PRE>
<P>We associate the top level layout with the Activity via the=20
<EM>setContentView</EM> method in the <EM>onCreate</EM> method of the=20
<EM>Activity</EM> class.</P>
<PRE><CODE>    public void onCreate(Bundle savedInstanceState) {=0A=
        super.onCreate(savedInstanceState);=0A=
        setContentView(R.layout.activity_to_do);=0A=
</CODE></PRE>
<H3><A name=3D"adapter"></A>How to: Define the adapter</H3>
<P>Since the data source for our view is an array, we subclass our =
adapter from=20
the <EM>AdapterView</EM> class. This subclass will use an =
<EM>Adapter</EM>=20
object to actually retrieve the data from the database query, and =
converts each=20
item retrieved into a view that is added to the <EM>AdapterView</EM> =
layout.</P>
<P>In our code we define the following class which is an extension of =
the=20
<EM>ArrayAdapter&lt;E&gt;</EM> class:</P>
<PRE><CODE>    public class ToDoItemAdapter extends =
ArrayAdapter&lt;ToDoItem&gt; {=0A=
</CODE></PRE>
<P>You must override the adapter's <EM>getView</EM> method. This sample =
code is=20
one example of how to do this: details will vary with your =
application.</P>
<PRE><CODE>public View getView(int position, View convertView, ViewGroup =
parent) {=0A=
    View row =3D convertView;=0A=
=0A=
    final ToDoItem currentItem =3D getItem(position);=0A=
=0A=
    if (row =3D=3D null) {=0A=
        LayoutInflater inflater =3D ((Activity) =
mContext).getLayoutInflater();=0A=
        row =3D inflater.inflate(mLayoutResourceId, parent, false);=0A=
    }=0A=
=0A=
    row.setTag(currentItem);=0A=
=0A=
    /* This code is specific to this particular example */=0A=
    final CheckBox checkBox =3D (CheckBox) =
row.findViewById(R.id.checkToDoItem);=0A=
    checkBox.setText(currentItem.getText());=0A=
    checkBox.setChecked(false);=0A=
    checkBox.setEnabled(true);=0A=
=0A=
    checkBox.setOnClickListener(new View.OnClickListener() {=0A=
=0A=
        @Override=0A=
        public void onClick(View arg0) {=0A=
            if (checkBox.isChecked()) {=0A=
                checkBox.setEnabled(false);=0A=
                if (mContext instanceof ToDoActivity) {=0A=
                    ToDoActivity activity =3D (ToDoActivity) mContext;=0A=
                    activity.checkItem(currentItem);=0A=
                }=0A=
            }=0A=
        }=0A=
    });=0A=
=0A=
    return row;=0A=
}=0A=
</CODE></PRE>
<P>We create an instance of this class in our Activity as follows:</P>
<PRE><CODE>    private ToDoItemAdapter mAdapter;=0A=
    mAdapter =3D new ToDoItemAdapter(this, R.layout.row_list_to_do);=0A=
</CODE></PRE>
<P>Note that the second parameter to the ToDoItemAdapter constructor is =
a=20
reference to the layout. The call to the constructor is followed by the=20
following code which first gets a reference to the =
<STRONG>ListView</STRONG>,=20
and next calls <EM>setAdapter</EM> to configure itself to use the =
adapter we=20
just created:</P>
<PRE><CODE>    ListView listViewToDo =3D (ListView) =
findViewById(R.id.listViewToDo);=0A=
    listViewToDo.setAdapter(mAdapter);=0A=
</CODE></PRE>
<H3><A name=3D"use-adapter"></A>How to: Use the adapter</H3>
<P>You are now ready to use data binding. The following code shows how =
to get=20
the items in the mobile service table, clear the apapter, and then call =
the=20
adapter's <EM>add</EM> method to fill it with the returned items.</P>
<PRE><CODE>    mToDoTable.execute(new =
TableQueryCallback&lt;ToDoItem&gt;() {=0A=
        public void onCompleted(List&lt;ToDoItem&gt; result, int count, =
Exception exception, ServiceFilterResponse response) {=0A=
            if (exception =3D=3D null) {=0A=
                mAdapter.clear();=0A=
                for (ToDoItem item : result) {=0A=
                    mAdapter.add(item);=0A=
                }=0A=
            } =0A=
        }=0A=
    });=0A=
</CODE></PRE>
<P>You must also call the adapter any time you modify the =
<EM>ToDoItem</EM>=20
table if you want to display the results of doing that. Since =
modifications are=20
done on a record by record basis, you will be dealing with a single row =
instead=20
of a collection. When you insert an item you call the <EM>add</EM> =
method on the=20
adapter, when deleting, you call the <EM>remove</EM> method.</P>
<H2><A name=3D"authentication"></A><SPAN=20
class=3D"short-header">Authentication</SPAN>How to: Authenticate =
users</H2>
<P>Mobile Services supports authenticating and authorizing app users =
using a=20
variety of external identity providers: Facebook, Google, Microsoft =
Account, and=20
Twitter. You can set permissions on tables to restrict access for =
specific=20
operations to only authenticated users. You can also use the identity of =

authenticated users to implement authorization rules in server scripts. =
For more=20
information, see <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D296316">Get=20
started with authentication</A>.</P>
<P>Two authentication flows are supported: a <EM>server</EM> flow and a=20
<EM>client</EM> flow. The server flow provides the simplest =
authentication=20
experience, as it relies on the provider=E2=80=99s web authentication =
interface. The=20
client flow allows for deeper integration with device-specific =
capabilities such=20
as single-sign-on as it relies on provider-specific device-specific =
SDKs.</P>
<P>Three steps are required to enable authentication in your app:</P>
<OL>
  <LI>Register your app for authentication with a provider, and =
configure Mobile=20
  Services</LI>
  <LI>Restrict table permissions to authenticated users only</LI>
  <LI>Add authentication code to your app</LI></OL>
<P>Mobile Services supports the following existing identity providers =
that you=20
can use to authenticate users:</P>
<UL>
  <LI>Facebook</LI>
  <LI>Google </LI>
  <LI>Microsoft Account</LI>
  <LI>Twitter</LI></UL>
<P>You can set permissions on tables to restrict access for specific =
operations=20
to only authenticated users. You can also use the ID of an authenticated =
user to=20
modify requests. </P>
<P>These first two tasks are done using the <A =
href=3D"https://manage.windowsazure.com/">Windows=20
Azure Management Portal</A>. For more information, see <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D296316">Get=20
started with authentication</A>.</P>
<H3><A name=3D"caching"></A>How to: Add authentication code to your =
app</H3>
<OL>
  <LI>
  <P>Add the following import statements to your app's activity =
file.</P>
<PRE><CODE>import =
com.microsoft.windowsazure.mobileservices.MobileServiceUser;=0A=
import =
com.microsoft.windowsazure.mobileservices.MobileServiceAuthenticationProv=
ider;=0A=
import =
com.microsoft.windowsazure.mobileservices.UserAuthenticationCallback;=0A=
</CODE></PRE></LI>
  <LI>
  <P>In the <STRONG>onCreate</STRONG> method of the activity class, add =
the=20
  following line of code after the code that creates the=20
  <CODE>MobileServiceClient</CODE> object: we assume that the reference =
to the=20
  <CODE>MobileServiceClient</CODE> object is <EM>mClient</EM>.</P>
<PRE><CODE>    // Login using the Google provider.=0A=
    mClient.login(MobileServiceAuthenticationProvider.Google,=0A=
            new UserAuthenticationCallback() {=0A=
                @Override=0A=
                public void onCompleted(MobileServiceUser user,=0A=
                        Exception exception, ServiceFilterResponse =
response) {  =0A=
                    if (exception =3D=3D null) {=0A=
                        createAndShowDialog(String.format(=0A=
                                        "You are now logged in - %1$2s",=0A=
                                        user.getUserId()), "Success");=0A=
                        /* code to create table reference and refresh ui =
goes here */=0A=
                    } else {=0A=
                        createAndShowDialog("You must log in. Login =
Required", "Error");=0A=
                    }=0A=
                }=0A=
            });=0A=
</CODE></PRE>
  <P>This code authenticates the user using a Google login. A dialog is=20
  displayed which displays the ID of the authenticated user. You cannot =
proceed=20
  without a positive authentication.</P>
  <DIV class=3D"dev-callout"><B>Note</B>=20
  <P>If you are using an identity provider other than Google, change the =
value=20
  passed to the <STRONG>login</STRONG> method above to one of the =
following:=20
  <I>MicrosoftAccount</I>, <I>Facebook</I>, or =
<I>Twitter</I>.</P></DIV></LI>
  <LI>
  <P>When you run the app, sign in with your chosen identity provider.=20
</P></LI></OL>
<H3><A name=3D"caching"></A>How to: Cache authentication tokens</H3>
<P>This section shows how to cache an authentication token. Do this to =
prevent=20
users from having to authenticate again if app is "hibernated" while the =
token=20
is still vaid.</P>
<P>To do this you must store the User ID and authentication token =
locally on the=20
device. The next time the app starts, you check the cache, and if these =
values=20
are present, you can skip the login procedure and rehydrate the client =
with this=20
data. However this data is sensitive, and it should be stored encrypted =
for=20
safety in case the phone gets stolen.</P>
<P>So what happens if your token expires? In this case, when you try to =
use it=20
to connect, you will get a <EM>401 unauthorized</EM> response. The user =
must=20
then log in to obtain new tokens. You can avoid having to write code to =
handle=20
this in every place in your app that calls Mobile Servides by using =
filters,=20
which allow you to intercept calls to and responses from Mobile =
Services. The=20
filter code will then test the response for a 401, trigger the login =
process if=20
needed, and then resume the request that generated the 401.</P>
<H2><A name=3D"errors"></A><SPAN class=3D"short-header">Error =
handling</SPAN>How to:=20
Handle errors</H2>
<P>Here is one way you might provide a <EM>global</EM> error =
handler.</P>
<P>The code we've seen that accesses the mobile service table has =
involved three=20
different callback objects:</P>
<UL>
  <LI>TableQueryCallback / TableQueryJsonCallback</LI>
  <LI>TableOperationCallback / TableJsonOperationCallback</LI>
  <LI>TableDeleteCallback / TableJsonDeleteCallback</LI></UL>
<P>Each of these has an <EM>OnCompleted</EM> method where the second =
parameter=20
is a <STRONG>java.lang.Exception</STRONG> object. You can subclass these =

callback objects and implement your own <EM>onCompleted</EM> method that =
checks=20
if the exception parameter is null. If so, there is no error, and you =
just call =20
<B>super.OnCompleted()</B>.</P>
<P>If the <STRONG>Exception</STRONG> object is not null, perform some =
generic=20
error handling.</P>
<OL>
  <LI>You may wish to display information about the exception along with =
some=20
  general text.</LI>
  <LI>The most informative exception error information will be in these=20
  properties, where e is the reference to the exception.    =20
  <UL>
    <LI><B>e.Response.Content</B></LI>
    <LI><B>e.Response.StatusDescription</B></LI>
    <LI><B>e.Response.StatusCode</B></LI></UL></LI></OL>
<P>You can see an example <A =
href=3D"https://www.windowsazure.com/en-us/develop/mobile/tutorials/valid=
ate-modify-and-augment-data-dotnet/"=20
target=3D"_blank">here</A>.</P>
<P>Now the developer can use their subclassed callbacks and not worry =
about=20
checking the exception, because it is handled in one central place (#2) =
for all=20
instances of the callback.</P>
<H2><A name=3D"tests"></A><SPAN class=3D"short-header">Designing =
tests</SPAN>How to:=20
Design unit tests</H2>
<P><EM>(Optional) This section shows how to write unit tests when using =
the=20
client library (info from Yavor).</EM></P>
<H2><A name=3D"customizing"></A><SPAN class=3D"short-header">Customizing =
the=20
client</SPAN>How to: Customize the client</H2>
<P><EM>(Optional) This section shows how to send customized client=20
behaviors.</EM></P>
<H3><A name=3D"headers"></A>How to: Customize request headers</H3>
<P><EM>(Optional) This section shows how to send custom request=20
headers.</EM></P>
<P>For more information see, New topic about processing headers in the=20
server-side. TBD: where is this??</P>
<P>Hook up a ServiceFilter like this:</P>
<PRE><CODE>    client =3D client.withFilter(new ServiceFilter() {=0A=
=0A=
        @Override=0A=
        public void handleRequest(ServiceFilterRequest request, =
NextServiceFilterCallback nextServiceFilterCallback,=0A=
            ServiceFilterResponseCallback responseCallback) {=0A=
=0A=
            // Do stuff to request object=0A=
=0A=
            nextServiceFilterCallback.onNext(request, responseCallback);=0A=
        }=0A=
    });=0A=
</CODE></PRE>
<P>Inside the method show calling <CODE>request.addHeader</CODE>.</P>
<H3><A name=3D"serialization"></A>How to: Customize serialization</H3>
<P><EM>(Optional) This section shows how to use attributes to customize =
how data=20
types are serialized.</EM></P>
<P>Mobile Services assumes by default that the table names, column names =
and=20
data types on the server all match exactly what is on the client. But =
there can=20
be any number of reasons why the server and client names might not =
match. One=20
example might be if you have an existing client that you want to change =
so that=20
it uses Windows Azure Mobile Services instead of a compettitor's =
product.</P>
<P>You might want to do the following kinds of customizations:</P>
<UL>
  <LI>The column names used in the mobile service table don't match the =
names=20
  you are using in the client</LI>
  <LI>Use a mobile service table that has a different name than the =
class it=20
  maps to in the client</LI>
  <LI>Turn on automatic property capitalization</LI>
  <LI>Add complex properties to an object</LI></UL>
<H3><A name=3D"columns"></A>How to: Map different client and server =
names</H3>
<P>Suppose that your Java client code uses standard Java-style names for =
the=20
<EM>ToDoItem</EM> object properties, such as the following. </P>
<UL>
  <LI>mId</LI>
  <LI>mText</LI>
  <LI>mComplete</LI>
  <LI>mDuration</LI></UL>
<P>You must serialize the client names into JSON names that match the =
column=20
names of the <EM>ToDoItem</EM> table on the server. The following code, =
which=20
makes use of the <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290801" =
target=3D"_blank">gson</A>=20
library does this.</P>
<PRE><CODE>@com.google.gson.annotations.SerializedName("text")=0A=
private String mText;=0A=
=0A=
@com.google.gson.annotations.SerializedName("id")=0A=
private int mId;=0A=
=0A=
@com.google.gson.annotations.SerializedName("complete")=0A=
private boolean mComplete;=0A=
=0A=
@com.google.gson.annotations.SerializedName("duration")=0A=
private String mDuration;=0A=
</CODE></PRE>
<H3><A name=3D"table"></A>How to: Map different table names between =
client and=20
mobile services</H3>
<P>Mapping the client table name to a different mobile services table =
name is=20
easy, we just use one of the overrides of the <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290689"=20
target=3D"_blank">getTable()</A> function, as seen in the following =
code.</P>
<PRE><CODE>    mToDoTable =3D mClient.getTable("ToDoItemBackup", =
ToDoItem.class);=0A=
</CODE></PRE>
<H3><A name=3D"conversions"></A>How to: Automate column name =
mappings</H3>
<P>Mapping column names for a narrow table with only a few columns isn't =
a big=20
deal, as we saw in the prior section. But suppose our table has a lot of =

columns, say 20 or 30. It turns out that we can call the <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290801"=20
target=3D"_blank">gson</A> API and specify a conversion strategy that =
will apply=20
to every column, and avoid having to annotate every single column =
name.</P>
<P>To do this we use the <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290801"=20
target=3D"_blank">gson</A> library which the Android client library uses =
behind=20
the scenes to serialize Java objects to JSON data, which is sent to =
Windows=20
Azure Mobile Services. {TBD: this needs to be explained better and =
earlier}</P>
<P>The following code uses the <EM>setFieldNamingStrategy()</EM> method, =
in=20
which we define a <EM>FieldNamingStrategy()</EM> method. This method =
says to=20
delete the initial character (an "m"), and then lower-case the next =
character,=20
for every field name. This code also enables pretty-printing of the =
output=20
JSON.</P>
<PRE><CODE>client.setGsonBuilder(=0A=
    MobileServiceClient=0A=
    .createMobileServiceGsonBuilder()=0A=
    .setFieldNamingStrategy(new FieldNamingStrategy() {=0A=
        public String translateName(Field field) {=0A=
            String name =3D field.getName();=0A=
            return Character.toLowerCase(name.charAt(1))=0A=
                + name.substring(2);=0A=
            }=0A=
        })=0A=
        .setPrettyPrinting());=0A=
</CODE></PRE>
<P>This code must be executed prior to any method calls on the Mobile =
Services=20
client object.</P>
<H3><A name=3D"complex"></A>How to: Store an object or array property =
into a=20
table</H3>
<P>So far all of our serialization examples have involved primitive =
types such=20
as integers and strings which easily serialize into JSON and into the =
mobile=20
services table. Suppose we want to add a complex object to our client =
type,=20
which doesn't automatically serialize to JSON and to the table. For =
example we=20
might want to add an array of strings to the client object. It is now up =
to us=20
to specify how to do the serialization, and how to store the array into =
the=20
mobile services table.</P>
<P>To see an example of how to do this, check out the blog post <A =
href=3D"http://hashtagfail.com/post/44606137082/mobile-services-android-s=
erialization-gson"=20
target=3D"_blank">Customizing serialization using the <A =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290801"=20
target=3D"_blank">gson</A> library in the Mobile Services Android =
client.</P>
<P>This general method can be used whenever we have a complex object =
that is not=20
automatically serializable into JSON and the mobile services table.</P>
<H2><A name=3D"next-steps"></A>Next steps</H2>
<P>The Javadocs reference for the Android client API is at <A =
title=3D"here" =
href=3D"http://go.microsoft.com/fwlink/?LinkId=3D290689">http://go.micros=
oft.com/fwlink/?LinkId=3D290689</A></P><!-- Anchors. -->=20
<P><!-- Images. --> <!-- URLs. --></P></DIV></DIV></BODY></HTML><!-- =
This document was created with MarkdownPad, the Markdown editor for =
Windows (http://markdownpad.com) -->
